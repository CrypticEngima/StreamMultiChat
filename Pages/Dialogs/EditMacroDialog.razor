<div class="editMacro">
		<table>
			<tr>
				<td>
					<label for="enabled">Is Enabled</label>
				</td>
				<td>
					<input type=checkbox name="enabled" class="form-control" @bind="IsEnabled" />
				</td>
			</tr>
			<tr>
				<td>
					<label for="command">Command</label>
				</td>
				<td>
					<input type=text name="command" placeholder="Text we check" class="form-control" @bind="Command" />
				</td>
			</tr>
			<tr>
				<td>
					<label for="response">Response</label>
				</td>
				<td>
					<input type=text name="response" placeholder="Text we send" class="form-control" @bind="Response" />
				</td>
			</tr>
			<tr>
				<td>
					<label for="Channel">Channel</label>
				</td>
				<td>
					<select id="channel" name="channel" class="form-control"  @bind="Channel">
						@foreach (var channel in DisplayService.Channels)
						{
							<option value="@channel.Id">@channel.Id</option>
						}
					</select>
				</td>
			</tr>
		</table>


	<button @onclick="(Submit)" class="btn btn-primary">Submit</button>
	<button @onclick="BlazoredModal.Cancel" class="btn btn-primary cancelBtn">Cancel</button>
</div>

@code {
	[CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
	[Parameter] public Macro Macro { get; set; }
	[Parameter] public DisplayService DisplayService { get; set; }
	bool IsEnabled;
	string Command;
	string Response;
	string Channel;

	protected override Task OnInitializedAsync()
	{
		if (Macro == null)
		{
			Macro = new Macro();
		}

		IsEnabled = Macro.IsEnabled;
		Command = Macro.Command;
		Response = Macro.Response;
		Channel = Macro.Channel?.Id;

		return Task.CompletedTask;
	}

	async Task Submit()
	{

		if (Channel is null) Channel = "All";

		var macroToReturn = new Macro
		{
			IsEnabled = IsEnabled,
			Command = Command,
			Response = Response,
			Channel = await DisplayService.GetChannel(Channel)
		};

		await BlazoredModal.Close(ModalResult.Ok(macroToReturn));
	}
}

<div class="editMacro">
	<EditForm Model="@Macro">
		<table>
			<tr>
				<td>
					<label for="enabled">Is Enabled</label>
				</td>
				<td>
					<InputCheckbox type=checkbox name="enabled" class="form-control"  @bind-Value="IsEnabled" />
				</td>
			</tr>
			<tr>
				<td>
					<label for="command">Command</label>
				</td>
				<td>
					<InputText name="command" placeholder="Text we check" class="form-control"  @bind-Value="Command" />
				</td>
			</tr>
			<tr>
				<td>
					<label for="response">Response</label>
				</td>
				<td>
					<InputText name="response" placeholder="Text we send" class="form-control"  @bind-Value="Response" />
				</td>
			</tr>
			<tr>
				<td>
					<label for="Channel">Response</label>
				</td>
				<td>
					<InputSelect name="channel" placeholder="Text we send" class="form-control"  @bind-Value="Channel">
						<option value="">Any</option>
						@foreach (var channel in Channels)
						{
							<option value="@channel">@channel</option>
						}
					</InputSelect>
				</td>
			</tr>
		</table>
	</EditForm>


	<button @onclick="(Submit)" class="btn btn-primary">Submit</button>
	<button @onclick="BlazoredModal.Cancel" class="btn btn-primary cancelBtn">Cancel</button>
</div>

@code {
	[CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
	[Parameter] public Macro Macro { get; set; }
	[Parameter] public List<string> Channels { get; set; }
	bool IsEnabled;
	string Command;
	string Response;
	string Channel;

	protected override Task OnInitializedAsync()
	{
		if(Macro == null)
		{
			Macro = new Macro();
		}

		IsEnabled = Macro.IsEnabled;
		Command = Macro.Command;
		Response = Macro.Response;
		Channel = Macro.Channel;

		return Task.CompletedTask;
	}

	void Submit()
	{
		var macroToReturn = new Macro
		{
			IsEnabled = IsEnabled,
			Command = Command,
			Response = Response,
			Channel = Channel
		};

		BlazoredModal.Close(ModalResult.Ok(macroToReturn));
	}
}

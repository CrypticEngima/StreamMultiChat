@page "/chat"

@inject AuthenticationService AuthenticationService
@inject NavigationManager NavManager
@inject DisplayService DisplayService
@inject IJSRuntime JSRuntime

<main>
	<h1>Chat</h1>

	<div class="response_output">
		<ul id="messagesList">
			@foreach (var displayMessage in Messages)
			{
				<li>
					@displayMessage.Message 
					@if (displayMessage.ModControls) { <ModComponent DisplayMessage="displayMessage" DisplayService="DisplayService"/> }</li>
			}
			<li id="anchor"></li>
		</ul>
	</div>
	<div id="controlButtons">
		<button @onclick="@(() => ShowJoinDialog())" class="btn btn-primary">Join Channel</button>
		<button @onclick="@(() => ShowLeaveDialog())" class="btn btn-primary">Leave Channel</button>
		<button @onclick="@(() => ShowMacroManagementDialog())" class="btn btn-primary">EditMacros</button>
		<button @onclick="DownloadFile" class="btn btn-primary">Export Macros</button>
	</div>
	<div id="chatForm">
		<label for="sel_send">Channel to send message.</label>
		<select id="sel_send" class="form-control d-flex" name="sel_send" @bind="SelectedValue">
			<option value="" disabled selected hidden>Please choose channel...</option>
			@foreach (var channel in DisplayService.Channels)
			{
				<option value=@channel.Id>@channel.Id</option>
			}
		</select>
		<label for="txt_send">Message to send.</label>
		<input type="text" class="form-control" id="txt_send" name="txt_send" @bind="Message" placeholder="Message" @onkeydown="@CheckForSend" />
		<input type="button" class="btn btn-primary" value="Send" id="btn_send" name="btn_send" @onclick="@SendMessage" />
	</div>
</main>

@code {
	[CascadingParameter] public IModalService Modal { get; set; }

	string Message = "";
	string SelectedValue;
	List<DisplayMessage> Messages = new List<DisplayMessage>();

	protected override async Task OnInitializedAsync()
	{
		base.OnInitialized();

		if(!AuthenticationService.IsAuthenticated)
		{
			NavManager.NavigateTo(NavManager.BaseUri);
		}

		DisplayService.OnMessageReceived += RecieveMessage;

		await AddChannels();
		await DisplayService.JoinChannels();
		SelectedValue = DisplayService.AllChannel.Id;
	}

	async Task AddChannels()
	{
		var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
		if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("channels", out var _channels))
		{
			var channels = _channels.ToString().Split(',');
			foreach (var channel in channels)
			{
				await DisplayService.AddChannel(channel);
			}
		}
		await base.InvokeAsync(StateHasChanged);
	}

	async void RecieveMessage(object sender, DisplayMessage message)
	{
		Messages.Add(message);
		await base.InvokeAsync(StateHasChanged);
	}

	async Task CheckForSend(KeyboardEventArgs e)
	{
		if (e.Key == "Enter" && !e.ShiftKey)
		{
			await SendMessage();
		}
	}

	async Task SendMessage()
	{
		var channel = await DisplayService.GetChannel(SelectedValue);
		var msg = await DisplayService.SendMessage(channel,Message);
		Messages.AddRange(msg);
		Message = "";
		await base.InvokeAsync(StateHasChanged);
	}

	async void ShowJoinDialog()
	{
		var modalResponse = Modal.Show<JoinChannelDialog>("Join Channel");
		var result = await modalResponse.Result;


		if (!result.Cancelled)
		{
			var chans = result.Data.ToString().Split(',');
			foreach (var item in chans)
			{
				await DisplayService.AddChannel(item);
			}
			await base.InvokeAsync(StateHasChanged);
		}
	}

	async void ShowLeaveDialog()
	{
		var parameters = new ModalParameters();
		parameters.Add(nameof(DisplayService), DisplayService);

		var modalResponse = Modal.Show<LeaveChannelDialog>("Leave Channel", parameters);
		var result = await modalResponse.Result;


		if (!result.Cancelled)
		{
			await DisplayService.RemoveChannel((Channel)result.Data);
			await base.InvokeAsync(StateHasChanged);
		}

	}

	async void ShowMacroManagementDialog()
	{
		var parameters = new ModalParameters();
		parameters.Add(nameof(DisplayService), DisplayService);

		var modalResponse = Modal.Show<MacroManagementDialog>("Macro Management", parameters);
		var result = await modalResponse.Result;


		if (!result.Cancelled)
		{
			await base.InvokeAsync(StateHasChanged);
		}

	}

	async void DownloadFile()
	{
		await JSRuntime.InvokeAsync<object>(
			"FileSaveAs",
			"macros.json",
			JsonSerializer.Serialize(await DisplayService.GetAllMacros())
		);
	}
}

@page "/chat"

@inject NavigationManager NavManager
@inject TwitchService ChatService
@inject IJSRuntime JSRuntime

<main>
	<h1>Chat</h1>

	<div class="response_output">
		<ul id="messagesList">
			@foreach (var message in Messages)
			{
				<li>@message</li>
			}
		</ul>
	</div>
	<div id="controlButtons">
		<button @onclick="@(() => ShowJoinDialog())" class="btn btn-primary">Join Channel</button>
		<button @onclick="@(() => ShowLeaveDialog())" class="btn btn-primary">Leave Channel</button>
		<button @onclick="@(() => ShowMacroManagementDialog())" class="btn btn-primary">EditMacros</button>
		<button @onclick="DownloadFile" class="btn btn-primary">Export Macros</button>
		@*<input type=file @onchange="ImportFile" />*@
	</div>
	<div id="chatForm">
		<label for="sel_send">Channel to send message.</label>
		<select id="sel_send" class="form-control d-flex" name="sel_send" @bind="SelectedValue">
			<option value="" disabled selected hidden>Please choose channel...</option>
			<option value="all">All</option>
			@foreach (var channel in Channels)
			{
				<option value=@channel>@channel</option>
			}
		</select>
		<label for="txt_send">Message to send.</label>
		<input type="text" class="form-control" id="txt_send" name="txt_send" @bind="Message" placeholder="Message" @onkeydown="@CheckForSend" />
		<input type="button" class="btn btn-primary" value="Send" id="btn_send" name="btn_send" @onclick="@SendMessage" />
	</div>
</main>

@code {
	[CascadingParameter] public IModalService Modal { get; set; }

	string Message = "";
	string SelectedValue = "";
	IList<string> Channels = new List<string> { };

	IList<string> Messages = new List<string>();
	List<Macro> Macros = new List<Macro>();

	protected override async Task OnInitializedAsync()
	{
		base.OnInitialized();

		ChatService.OnMessageReceived += ReceiveMessageHandler;
		ChatService.Connect();

		await FillSelect();
		await JoinChannels();
	}

	async void ReceiveMessageHandler(object sender, ChatMessageReceivedEventArgs e)
	{
		var msg = await FormatMessage(e.ChatMessage);
		await ReceiveMessage(msg);
	}

	async Task ReceiveMessage(string message)
	{
		Messages.Add(message);
		await base.InvokeAsync(StateHasChanged);
	}

	Task<string> FormatMessage(ChatMessage inMessage)
	{
		return Task.FromResult($"{DateTime.Now:t}   [{inMessage.Channel}] ({inMessage.Username}) : {inMessage.Message}");

	}

	async Task SendMessage()
	{
		if (SelectedValue.ToLowerInvariant() == "all")
		{
			var returnMessages = ChatService.SendMessage(CheckMacros(Message));
			foreach (var item in returnMessages)
			{
				var msg = await FormatMessage(item);
				Messages.Add(msg);
			}
		}
		else
		{
			var returnMessage = ChatService.SendMessage(SelectedValue, CheckMacros(Message));
			var msg = await FormatMessage(returnMessage);
			Messages.Add(msg);
		}

		Message = "";
	}

	string CheckMacros(string message)
	{
		foreach (var macro in Macros)
		{
			if (macro.CanRun(message))
			{
				return macro.Response;
			}
		}
		return message;
	}

	Task FillSelect()
	{
		var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
		if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("channels", out var _channels))
		{
			var chans = _channels.ToString().Split(',');
			foreach (var item in chans)
			{
				Channels.Add(item);
			}
		}
		StateHasChanged();
		return Task.CompletedTask;

	}

	async Task JoinChannels()
	{
		foreach (var channel in Channels)
		{
			await ChatService.JoinChannel(channel);
		}
	}

	async Task CheckForSend(KeyboardEventArgs e)
	{
		if (e.Key == "Enter" && !e.ShiftKey)
		{
			await SendMessage();
		}
	}

	async void ShowJoinDialog()
	{
		var modalResponse = Modal.Show<JoinChannelDialog>("Join Channel");
		var result = await modalResponse.Result;


		if (!result.Cancelled)
		{
			var chans = result.Data.ToString().Split(',');
			foreach (var item in chans)
			{
				await ChatService.JoinChannel(item);
				Channels.Add(item);
			}
			await base.InvokeAsync(StateHasChanged);
		}
	}

	async void ShowLeaveDialog()
	{
		var parameters = new ModalParameters();
		parameters.Add(nameof(Channels), Channels);

		var modalResponse = Modal.Show<LeaveChannelDialog>("Leave Channel", parameters);
		var result = await modalResponse.Result;


		if (!result.Cancelled)
		{
			await ChatService.LeaveChannel(result.Data.ToString());
			Channels.Remove(result.Data.ToString());
		}
		await base.InvokeAsync(StateHasChanged);
	}

	async void ShowMacroManagementDialog()
	{
		var parameters = new ModalParameters();
		parameters.Add(nameof(Macros), Macros);

		var modalResponse = Modal.Show<MacroManagementDialog>("Macro Management", parameters);
		var result = await modalResponse.Result;


		if (!result.Cancelled)
		{
			Macros = (List<Macro>)result.Data;
		}
		await base.InvokeAsync(StateHasChanged);
	}

	async void DownloadFile()
	{
		await JSRuntime.InvokeAsync<object>(
			"FileSaveAs",
			"macros.json",
			JsonSerializer.Serialize(Macros)
		);
	}

	void ImportFile()
	{

	}
}
